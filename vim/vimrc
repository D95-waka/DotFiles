" behevior settings
set autoindent
filetype plugin indent on
set tabstop=4
set shiftwidth=4
set modeline
set modelines=5
set wildmenu
set formatoptions+=r
set smartcase
set incsearch		" Live-mathing of the search as it's being types
set mouse=nvicr		" Allow mouse being used for cursor relocation and marks
set scrolloff=1
set undodir=~/.local/state/nvim/undo/
set undofile
filetype plugin on
let mapleader = " "
noremap <leader>y "+y
noremap <leader>p "+p

" syntax and number lines
syntax on
set number relativenumber
set numberwidth=1
" set encoding=utf8
set conceallevel=2		" Enable conceled marked chars to be hidden
set noshowmode
set laststatus=2

" for folding, za to toggle
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
set foldlevel=30

" abbreviations
set iskeyword+=#
iabbrev #sh #!/usr/bin/env sh<CR>

augroup SPECIAL_FILES
	autocmd!
	autocmd BufNewFile,BufRead *.rasi set syntax=css
	autocmd BufWritePost */.config/sway/* silent !swaymsg reload
augroup END

augroup pencil
	autocmd!
	autocmd FileType markdown,mkd call pencil#init()
	autocmd FileType text         call pencil#init()
augroup END

let g:vimtex_syntax_enabled = 0
let g:vimtex_syntax_conceal_disable = 1

lua << END
require('gruvbox').setup({
	transparent_mode = true
})
vim.o.background = 'dark'
vim.cmd("colorscheme gruvbox")

require('gitsigns').setup{}
require('lualine').setup {
	options = {
		theme = 'auto',
		icons_enabled = true,
		section_separators = { left = '', right = '' },
		component_separators = { left = '', right = '' }
	}
}

require('nvim-treesitter.configs').setup {
	auto_install = false,
	highlight = {
		enable = true
	},
	incremental_selection = {
		enable = true
	},
	indent = {
		enable = true
	}
}

-- Mappings.
local opts = { noremap=true, silent=true }
vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)

local on_attach = function(client, bufnr)
	-- Enable completion triggered by <c-x><c-o>
	vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

	-- Mappings.
	local bufopts = { noremap=true, silent=true, buffer=bufnr }
	vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
	vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
	vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
	vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
	vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
	vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
	vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
	vim.keymap.set('n', '<space>wl', function()
	print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
	end, bufopts)
	vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)
	vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, bufopts)
	vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)
	vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
	vim.keymap.set('n', '<space>f', function() vim.lsp.buf.format { async = true } end, bufopts)
end

require('lspconfig').texlab.setup {
	on_attach = on_attach,
	capabilities = require("cmp_nvim_lsp").default_capabilities(),
	settings = {
		["texlab"] = {
			auxDirectory = "./bin/",
			build = {
				executable = "latexmk",
				args = { "-lualatex", "-interaction=nonstopmode", "-synctex=1", '-output-directory=./bin/', "%f" },
				forwardSearchAfter = false,
				onSave = true
			},
			forwardSearch = {
				executable = "zathura",
				args = { "--synctex-editor-command=nvim --server '" .. vim.v['servername'] .. "' --remote-send %%{line}G", "--synctex-forward", "%l:1:%f", "%p" }
			},
			chktex = {
				onOpenAndSave = true,
				onEdit = true,
			}
		}
	}
}

local cmp = require('cmp')
cmp.setup {
	sources = {
		{ name = 'nvim_lsp' }
	},
	snippet = {
		expand = function(args)
			require('luasnip').lsp_expand(args.body)
		end
	},
	window = {
		completion = cmp.config.window.bordered(),
		documentation = cmp.config.window.bordered()
	},
	mapping = cmp.mapping.preset.insert({
		['<C-b>'] = cmp.mapping.scroll_docs(-4),
		['<C-f>'] = cmp.mapping.scroll_docs(4),
		['<C-Space>'] = cmp.mapping.complete(),
		['<C-e>'] = cmp.mapping.abort(),
		['<CR>'] = cmp.mapping.confirm({ select = true })
	})
}

END

imap <silent><expr> <Tab> luasnip#expand_or_jumpable() ? '<Plug>luasnip-expand-or-jump' : '<Tab>'
inoremap <silent> <S-Tab> <cmd>lua require'luasnip'.jump(-1)<Cr>
snoremap <silent> <Tab> <cmd>lua require('luasnip').jump(1)<Cr>
snoremap <silent> <S-Tab> <cmd>lua require('luasnip').jump(-1)<Cr>
